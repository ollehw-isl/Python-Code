
from sklearn.svm import SVC
from sklearn import metrics    
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
import re
from Code.Test_sampling import *
import pandas as pd



### Evaluation
def Evaluation(model, Test_x, Test_y):
    pred = model.predict(Test_x)
    fpr, tpr, thresholds = metrics.roc_curve(Test_y, model.predict_proba(Test_x)[:, 1], pos_label=1)
    roc_auc = metrics.auc(fpr, tpr)
    print("Accuracy = {}".format(metrics.accuracy_score(Test_y, pred)))
    print("Precision = {}".format(metrics.precision_score(Test_y, pred, pos_label=1)))
    print("Recall = {}".format(metrics.recall_score(Test_y, pred, pos_label=1)))
    print("F1 score = {}".format(metrics.f1_score(Test_y, pred, pos_label=1)))
    print("AUC = {}".format(roc_auc))


regex = re.compile(r"\[|\]|<", re.IGNORECASE)
train_x.columns = [regex.sub("_", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in train_x.columns.values]

rf_model = RandomForestClassifier(n_estimators=100, max_depth = 6, max_features = 6)
rf_model.fit(train_x, train_y_save)
Evaluation(rf_model, test_x, test_y_save)

xgb_model = xgb.XGBClassifier(n_estimator = 500, learning_rate = 0.01, max_depth = 4, gamma = 0.1)
xgb_model = xgb.XGBClassifier(n_estimator = 100, learning_rate = 0.1, max_depth = 3, gamma = 0.1)

xgb_model.fit(train_x, train_y_save)

svm_model = SVC(C = 5, gamma = 'scale', probability = True)
svm_model.fit(train_x, train_y_save)


### Test sampling
i = np.random.choice(10000,1, replace=False)
fully_sample, charged_sample, Test_sample = Test_sampling(test_dataset, 6000, 2000, 1000, seed = i)
fully_sample = np.fromfile('fully_sample_temp.dat', dtype=int)
charged_sample = np.fromfile('charged_sample_temp.dat', dtype=int)
Test_sample = pd.concat([test_dataset.iloc[list(fully_sample),:], test_dataset.iloc[list(charged_sample),:]])
Test_sample = Test_sample.reset_index()
Test_sample = Test_sample.drop(columns=['index'])



test_x, test_y_save = X_Y_split(Test_sample)

test_x.columns = [regex.sub("_", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in test_x.columns.values]

### SVM, RF, XGboost Training



print('############## SVM ################')
Evaluation(svm_model, test_x, test_y_save)
print('############## RF ################')
Evaluation(rf_model, test_x, test_y_save)
print('############## XGBoost ################')
Evaluation(xgb_model, test_x, test_y_save)

